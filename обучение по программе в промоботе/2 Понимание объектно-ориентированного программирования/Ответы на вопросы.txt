1) Основные принципы ООП
инкапсуляция - модификаторы доступа (public, privated, protected) и сетеры, гетеры. 
Так же любое другое изолирование деталей внутри класса от изменения из вне.

наследование - создание связи между родительским и наследуемым классом для описания общих используемых полей и методов только в родительском.
Позволяет избежать дублирования кода и выстроить иерархию.
Есть несколько классификаций, помню только множественное наследовнаие (наследование от нескольких родистельсих в одном наследуемом)

полиморфизм - различное поведение при одной записи.
Пример - переопределение функций и операторов.

абстракция - создание абстрактных классов, не имеющих объектов и имеющих читсые виртуальные функции.
Используется для описание общей функциональности.


2) Класс и объект
Класс - пользовательский тип данных, с выделением полей и методов. Можно представить в виде "шаблона" для объектов.
Объект - заполненый "шаблон" класса с возможностью вызова методов.

3) Реализация наследования
class имя_класса : модификатор_доступа имя_родителского_класса // модификтор позволяет наследуемым полям и методам сразу задавать доступ
{
    конструктор(все_параметры, ...) : имя_родителского_класса(только_параметры_для_родитеского_класса, ...)
    
    деструкторы вызываются в обратной последовательнсти иерархии
}

Увидел списки инициализации в примерах.

4) Виртуальные функции
Функции переопределяемые в наследуемых классах.
virtual имя_функции(...)

5) Модификаторы доступа
public - все помеченное будет доступно для вызова и изменения вне класса.
protected - доступ только внутри класса
privated - доступ только в наследуемых классах.

6) Конструктор и деструкторы
конструктор - используется для создания объекта и зполнения полей.
Могут быть перегружены или быть разных видов. Например, конструктор копирования.

Деструктор - вызывается при окончании использования объекта.
Обычно содержит код освобожения ресурсов и штатное завершение работы.