1) В чем разница между статическим и динамическим выделением памяти?

Статическое:
Создаются и удалюятся компилятором. //Q// компилятор не создает объекты памяти, он никак не взаимодействует с RAM либо процессором и его кешем (L1 L2 L3)
// Что делает компилятор? 
// Где создаются стат и дин переменные? (прочитать про куча, стек, rdata section)
// сколько памяти доступно одному процессу? 
Очищается при завершении программы.

Динамическое:
Используются ключевые слова new и delete.
Возможно удаление в ручном режиме.
Не зависят от завершения блока. //Q// не понятно о каком блоке речь
Использование нужного размера памяти.
Возможность использовать больший объем памяти. //Q// статическая переменная тоже может занимать большой объем


2) Как работают операторы new и delete?

new - создает объект определенного типа и возвращает указатель на него.
delete - получает указатель на объект и удаляте его.

Не реккомендуется повторное удаление или использование удаленных объектов. //Q// это запрещено. почему?
Указатели удаленных объектов реккомендуется обнулять. //Q// почему? что проиисходит если не обнулить?


3) Что такое утечка памяти и как ее предотвратить?

Определение - ситуация уменьшения объема доступной памяти из-за некорректоной ее очистки.

Предотвращается:
Отказом от использований динамической памяти. //Q// первый раз такое читаю, ссылку на источник пожалуйста
Использование "умных" указателей.
Использование сборщиков мусора. //Q// есть ли в с++ сборщик мусора? как влияет на программу сборщик мусора?
Перезапуск программы.

//Q// отдельно прочитать про weak_ptr
4) Объясните, что такое умные указатели (std::unique_ptr, std::shared_ptr).

unique_ptr позволяет взаимодейстовать только с одим объектом и 
не допускает создания второго unique_ptr на тот же самый объект.

shared_ptr хранит внутри себя счетчик, сколько shared_ptr ссылается на объект.
Объект будет удален только тогда, когда все указатели shared_ptr будут удалены.
Счеткик прибавляется при копирования или при созданнии еще одного shared_ptr.
//Q// копируются ли данные при использование shared_ptr? какие если да? 


5) Как работают ссылки в C++ и чем они отличаются от указателей?

Ссылка - создание альтернативного имени для объекта.
Для создания используется &.

Через ссылку возможно присвоение значения переменной от которой была взята ссылка.

Если ссылка создается от константы, то тоже должна быть константной.
От не константы ссылка может быть как константной, так и не константной.

По константным ссылкам нельзя изменять значене переменной, на которую она указывает.

Указатели имеют больший функционал по сравнению с сылкми.
Имет арифметику.
Работают с массивами.
Могут показывать адресс в памяти.
Используются во многих конструкциях языка.

Из соходства - изменение значение переменной, на которую указывают.
//Q// как реализуются ссылки компилятором при компиляции? 

