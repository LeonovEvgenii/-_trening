1) Какие контейнеры доступны в STL и для чего они используются?

array - фиксированный размер. Доступ к любому элементу.
Нельзя добавлять и удалеять элементы.

vector - переменный размер, произвольный доступ.
Добавление и удаление элементов из любого места.

deque - (очередь) - переменный размер, произвольный доступ.
Добавление и удаление только в начале и в конце.

list - (двусвязный список) - переменный размер.
Последовательный двунаправленный доступ к элементам.
Добавление и удаление в произвльное место.

fjrward_list - (односвязный список) - переменный размер.
Однонаправленый последовательный доступ к элементам.
Добавление и удаление в произвльное место.

stack - (стек) - переменный размер. Произвольный доступ.
Добавление и удаление только с одного конца.

queue - (очередь) - произвольный размер. Произвольный доступ.
Добавление с одного конца, удаление с другого.

priority_queue - очередь, но с учетом приоритета элемента.

map - (словарь) - произвольный размер. Доступ по ключу.
Добавление с учетом ключа.

unordered_map - аналогичен map, но не сортирует элементы.


2) Чем отличается vector от list?

Чтение в списке только последовательное.
(только соседий элемент). Если двунаправленный список, то левый и правый элемент.
Для прочтения всего списка его придется итерировать.


3) Как использовать итераторы в STL?

Используются при работе с коллекциями, массивами.
Перебор, доступ к  элементу.
Могут быть видов: прямые, обратные, константные.
Возможно, есть еще классификации.
Так же допускаю, что могут быть другие объекты, с корторыми можно
работать с помощью итераторов.


4) Что такое алгоритмы STL и как их применять?

Набор функций, подключаемых с помощью
#include <algorithm>
В данных функциях в реализованы часто встречающиеся задачи.
Например: максимальное значение, поиск, сортировка, копирование.


5) Как работает контейнер map и когда его использовать?

Содержит пары ключ - значение. Может быть как отсортирован по ключу так и не отсортирован (unordered_map).
Удобно использовать при создании структур хранения (по аналогии с nosql db, json)

